START
MOV BP, 0
MOV SP, 20
CALL main
HALT

//Code Gen for main function
main:
PUSH BP
MOV BP, SP
MOV R0, 1
PUSH R0
MOV R0, 2
PUSH R0
MOV R0, 3
PUSH R0
MOV R0, BP
MOV R1, 2
ADD R0, R1
IN R1
MOV [R0], R1
MOV R0, BP
MOV R1, 3
ADD R0, R1
MOV R1, 0
MOV [R0], R1
L1:
MOV R0, BP
MOV R1, 3
ADD R0, R1
MOV R0, [R0]
MOV R1, BP
MOV R2, 2
ADD R1, R2
MOV R1, [R1]
LT R0, R1
JZ R0, L2
MOV R0, 0
MOV R1, BP
MOV R2, 3
ADD R1, R2
MOV R1, [R1]
ADD R0, R1
IN R1
MOV [R0], R1
MOV R0, BP
MOV R1, 3
ADD R0, R1
MOV R1, BP
MOV R2, 3
ADD R1, R2
MOV R1, [R1]
MOV R2, 1
ADD R1, R2
MOV [R0], R1
JMP L1
L2:
MOV R0, BP
MOV R1, 1
ADD R0, R1
PUSH R0
//Pushing the arguments
MOV R1, 0
PUSH R1
MOV R1, BP
MOV R2, 2
ADD R1, R2
MOV R1, [R1]
MOV R2, 1
SUB R1, R2
PUSH R1
MOV R1, 1
PUSH R1
//Pushing arguments done
PUSH R1
CALL quicksort
POP R1
//Popping off arguments
POP R2
POP R2
POP R2
//Popping arguments done
POP R0
//Calling done
MOV [R0], R1
MOV R0, BP
MOV R1, 3
ADD R0, R1
MOV R1, 0
MOV [R0], R1
L3:
MOV R0, BP
MOV R1, 3
ADD R0, R1
MOV R0, [R0]
MOV R1, BP
MOV R2, 2
ADD R1, R2
MOV R1, [R1]
LT R0, R1
JZ R0, L4
//Code for WRITE
MOV R0, 0
MOV R1, BP
MOV R2, 3
ADD R1, R2
MOV R1, [R1]
ADD R0, R1
MOV R0, [R0]
OUT R0
MOV R0, BP
MOV R1, 3
ADD R0, R1
MOV R1, BP
MOV R2, 3
ADD R1, R2
MOV R1, [R1]
MOV R2, 1
ADD R1, R2
MOV [R0], R1
JMP L3
L4:
//Printing for return
MOV R1, 0
MOV R0, BP
MOV R2, 2
SUB R0, R2
MOV [R0], R1
POP R0
POP R0
POP R0
POP BP
RET

//Code Gen for quicksort function
quicksort:
PUSH BP
MOV BP, SP
MOV R0, 1
PUSH R0
MOV R0, 2
PUSH R0
MOV R0, -3
PUSH R0
MOV R0, -4
PUSH R0
MOV R0, -5
PUSH R0
MOV R0, BP
MOV R1, -5
ADD R0, R1
MOV R0, [R0]
MOV R1, BP
MOV R2, -4
ADD R1, R2
MOV R1, [R1]
LT R0, R1
JZ R0, L5
MOV R0, BP
MOV R1, 2
ADD R0, R1
PUSH R0
//Pushing the arguments
MOV R1, BP
MOV R2, -5
ADD R1, R2
MOV R1, [R1]
PUSH R1
MOV R1, BP
MOV R2, -4
ADD R1, R2
MOV R1, [R1]
PUSH R1
//Pushing arguments done
PUSH R1
CALL partition
POP R1
//Popping off arguments
POP R2
POP R2
//Popping arguments done
POP R0
//Calling done
MOV [R0], R1
MOV R0, BP
MOV R1, 1
ADD R0, R1
PUSH R0
//Pushing the arguments
MOV R1, BP
MOV R2, -5
ADD R1, R2
MOV R1, [R1]
PUSH R1
MOV R1, BP
MOV R2, 2
ADD R1, R2
MOV R1, [R1]
MOV R2, 1
SUB R1, R2
PUSH R1
PUSH R0
//Pushing the arguments
MOV R1, BP
MOV R2, 2
ADD R1, R2
MOV R1, [R1]
MOV R2, 1
ADD R1, R2
PUSH R1
MOV R1, BP
MOV R2, -4
ADD R1, R2
MOV R1, [R1]
PUSH R1
MOV R1, BP
MOV R2, -3
ADD R1, R2
MOV R1, [R1]
PUSH R1
//Pushing arguments done
PUSH R1
CALL quicksort
POP R1
//Popping off arguments
POP R2
POP R2
POP R2
//Popping arguments done
POP R0
//Calling done
PUSH R1
//Pushing arguments done
PUSH R1
CALL quicksort
POP R1
//Popping off arguments
POP R2
POP R2
POP R2
//Popping arguments done
POP R0
//Calling done
MOV [R0], R1
JMP L6
L5:
L6:
//Printing for return
MOV R1, 0
MOV R0, BP
MOV R2, 2
SUB R0, R2
MOV [R0], R1
POP R0
POP R0
POP R0
POP R0
POP R0
POP BP
RET

//Code Gen for partition function
partition:
PUSH BP
MOV BP, SP
MOV R0, 1
PUSH R0
MOV R0, 2
PUSH R0
MOV R0, 3
PUSH R0
MOV R0, 4
PUSH R0
MOV R0, -3
PUSH R0
MOV R0, -4
PUSH R0
MOV R0, BP
MOV R1, 4
ADD R0, R1
MOV R1, 0
MOV R2, BP
MOV R3, -3
ADD R2, R3
MOV R2, [R2]
ADD R1, R2
MOV R1, [R1]
MOV [R0], R1
MOV R0, BP
MOV R1, 2
ADD R0, R1
MOV R1, BP
MOV R2, -4
ADD R1, R2
MOV R1, [R1]
MOV [R0], R1
MOV R0, BP
MOV R1, 3
ADD R0, R1
MOV R1, BP
MOV R2, -4
ADD R1, R2
MOV R1, [R1]
MOV [R0], R1
L7:
MOV R0, BP
MOV R1, 2
ADD R0, R1
MOV R0, [R0]
MOV R1, BP
MOV R2, -3
ADD R1, R2
MOV R1, [R1]
LT R0, R1
JZ R0, L8
MOV R0, 0
MOV R1, BP
MOV R2, 2
ADD R1, R2
MOV R1, [R1]
ADD R0, R1
MOV R0, [R0]
MOV R1, BP
MOV R2, 4
ADD R1, R2
MOV R1, [R1]
LE R0, R1
JZ R0, L9
MOV R0, BP
MOV R1, 1
ADD R0, R1
PUSH R0
//Pushing the arguments
MOV R1, 0
MOV R2, BP
MOV R3, 3
ADD R2, R3
MOV R2, [R2]
ADD R1, R2
PUSH R1
MOV R1, 0
MOV R2, BP
MOV R3, 2
ADD R2, R3
MOV R2, [R2]
ADD R1, R2
PUSH R1
//Pushing arguments done
PUSH R1
CALL swap
POP R1
//Popping off arguments
POP R2
POP R2
//Popping arguments done
POP R0
//Calling done
MOV [R0], R1
MOV R0, BP
MOV R1, 3
ADD R0, R1
MOV R1, BP
MOV R2, 3
ADD R1, R2
MOV R1, [R1]
MOV R2, 1
ADD R1, R2
MOV [R0], R1
JMP L10
L9:
L10:
MOV R0, BP
MOV R1, 2
ADD R0, R1
MOV R1, BP
MOV R2, 2
ADD R1, R2
MOV R1, [R1]
MOV R2, 1
ADD R1, R2
MOV [R0], R1
JMP L7
L8:
MOV R0, BP
MOV R1, 1
ADD R0, R1
PUSH R0
//Pushing the arguments
MOV R1, 0
MOV R2, BP
MOV R3, 3
ADD R2, R3
MOV R2, [R2]
ADD R1, R2
PUSH R1
MOV R1, 0
MOV R2, BP
MOV R3, -3
ADD R2, R3
MOV R2, [R2]
ADD R1, R2
PUSH R1
//Pushing arguments done
PUSH R1
CALL swap
POP R1
//Popping off arguments
POP R2
POP R2
//Popping arguments done
POP R0
//Calling done
MOV [R0], R1
//Printing for return
MOV R1, BP
MOV R2, 3
ADD R1, R2
MOV R1, [R1]
MOV R0, BP
MOV R2, 2
SUB R0, R2
MOV [R0], R1
POP R0
POP R0
POP R0
POP R0
POP R0
POP R0
POP BP
RET

//Code Gen for swap function
swap:
PUSH BP
MOV BP, SP
MOV R0, 1
PUSH R0
MOV R0, -3
PUSH R0
MOV R0, -4
PUSH R0
MOV R0, BP
MOV R1, 1
ADD R0, R1
MOV R1, BP
MOV R2, -4
ADD R1, R2
MOV R1, [R1]
MOV R1, [R1]
MOV [R0], R1
MOV R0, BP
MOV R1, -4
ADD R0, R1
MOV R0, [R0]
MOV R1, BP
MOV R2, -3
ADD R1, R2
MOV R1, [R1]
MOV R1, [R1]
MOV [R0], R1
MOV R0, BP
MOV R1, -3
ADD R0, R1
MOV R0, [R0]
MOV R1, BP
MOV R2, 1
ADD R1, R2
MOV R1, [R1]
MOV [R0], R1
//Printing for return
MOV R1, 0
MOV R0, BP
MOV R2, 2
SUB R0, R2
MOV [R0], R1
POP R0
POP R0
POP R0
POP BP
RET

