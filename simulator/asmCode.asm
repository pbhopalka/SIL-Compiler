START
MOV BP, 0
MOV SP, 1
CALL main
HALT

//Code Gen for swap function
swap:
PUSH BP
MOV BP, SP
MOV R0, 1
PUSH R0
MOV R0, -3
PUSH R0
MOV R0, -4
PUSH R0
MOV R0, BP
MOV R1, 1
ADD R0, R1
MOV R1, BP
MOV R2, -4
ADD R1, R2
MOV R1, [R1]
MOV [R0], R1
MOV R0, BP
MOV R1, -4
ADD R0, R1
MOV R1, BP
MOV R2, -3
ADD R1, R2
MOV R1, [R1]
MOV [R0], R1
MOV R0, BP
MOV R1, -3
ADD R0, R1
MOV R1, BP
MOV R2, 1
ADD R1, R2
MOV R1, [R1]
MOV [R0], R1
//Printing for return
MOV R1, 1
MOV R0, BP
MOV R2, 2
SUB R0, R2
MOV [R0], R1
POP R0
MOV R1, BP
MOV R2, -4
ADD R1, R2
MOV [R1], R0
POP R0
MOV R1, BP
MOV R2, -3
ADD R1, R2
MOV [R1], R0
POP R0
MOV R1, BP
MOV R2, 1
ADD R1, R2
MOV [R1], R0
POP BP
RET

//Code Gen for factorial function
factorial:
PUSH BP
MOV BP, SP
MOV R0, 1
PUSH R0
MOV R0, -3
PUSH R0
MOV R0, BP
MOV R1, -3
ADD R0, R1
MOV R0, [R0]
MOV R1, 1
EQ R0, R1
MOV R1, BP
MOV R2, -3
ADD R1, R2
MOV R1, [R1]
MOV R2, 0
EQ R1, R2
ADD R0, R1
JZ R0, L1
MOV R0, BP
MOV R1, 1
ADD R0, R1
MOV R1, 1
MOV [R0], R1
JMP L2
L1:
MOV R0, BP
MOV R1, 1
ADD R0, R1
MOV R1, BP
MOV R2, -3
ADD R1, R2
MOV R1, [R1]
PUSH R0
PUSH R1
//Pushing the arguments
MOV R2, BP
MOV R3, -3
ADD R2, R3
MOV R2, [R2]
MOV R3, 1
SUB R2, R3
PUSH R2
//Pushing arguments done
PUSH R2
CALL factorial
POP R2
//Popping off arguments
POP R3
//Popping arguments done
POP R1
POP R0
MUL R1, R2
MOV [R0], R1
L2:
//Printing for return
MOV R1, BP
MOV R2, 1
ADD R1, R2
MOV R1, [R1]
MOV R0, BP
MOV R2, 2
SUB R0, R2
MOV [R0], R1
POP R0
MOV R1, BP
MOV R2, -3
ADD R1, R2
MOV [R1], R0
POP R0
MOV R1, BP
MOV R2, 1
ADD R1, R2
MOV [R1], R0
POP BP
RET

//Code Gen for main function
main:
PUSH BP
MOV BP, SP
MOV R0, 1
PUSH R0
MOV R0, 2
PUSH R0
MOV R0, 0
IN R1
MOV [R0], R1
MOV R0, BP
MOV R1, 2
ADD R0, R1
MOV R1, 1
MOV [R0], R1
L3:
MOV R0, BP
MOV R1, 2
ADD R0, R1
MOV R0, [R0]
MOV R1, 0
MOV R1, [R1]
LE R0, R1
JZ R0, L4
//Code for WRITE
//Pushing the arguments
MOV R0, BP
MOV R1, 2
ADD R0, R1
MOV R0, [R0]
PUSH R0
//Pushing arguments done
PUSH R0
CALL factorial
POP R0
//Popping off arguments
POP R1
//Popping arguments done
OUT R0
MOV R0, BP
MOV R1, 2
ADD R0, R1
MOV R1, BP
MOV R2, 2
ADD R1, R2
MOV R1, [R1]
MOV R2, 1
ADD R1, R2
MOV [R0], R1
JMP L3
L4:
//Printing for return
MOV R1, 1
MOV R0, BP
MOV R2, 2
SUB R0, R2
MOV [R0], R1
POP R0
MOV R1, BP
MOV R2, 2
ADD R1, R2
MOV [R1], R0
POP R0
MOV R1, BP
MOV R2, 1
ADD R1, R2
MOV [R1], R0
POP BP
RET

